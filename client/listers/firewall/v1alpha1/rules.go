/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-upcloud-api/apis/firewall/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RulesLister helps list Ruleses.
// All objects returned here must be treated as read-only.
type RulesLister interface {
	// List lists all Ruleses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Rules, err error)
	// Ruleses returns an object that can list and get Ruleses.
	Ruleses(namespace string) RulesNamespaceLister
	RulesListerExpansion
}

// rulesLister implements the RulesLister interface.
type rulesLister struct {
	indexer cache.Indexer
}

// NewRulesLister returns a new RulesLister.
func NewRulesLister(indexer cache.Indexer) RulesLister {
	return &rulesLister{indexer: indexer}
}

// List lists all Ruleses in the indexer.
func (s *rulesLister) List(selector labels.Selector) (ret []*v1alpha1.Rules, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rules))
	})
	return ret, err
}

// Ruleses returns an object that can list and get Ruleses.
func (s *rulesLister) Ruleses(namespace string) RulesNamespaceLister {
	return rulesNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RulesNamespaceLister helps list and get Ruleses.
// All objects returned here must be treated as read-only.
type RulesNamespaceLister interface {
	// List lists all Ruleses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Rules, err error)
	// Get retrieves the Rules from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Rules, error)
	RulesNamespaceListerExpansion
}

// rulesNamespaceLister implements the RulesNamespaceLister
// interface.
type rulesNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ruleses in the indexer for a given namespace.
func (s rulesNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Rules, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rules))
	})
	return ret, err
}

// Get retrieves the Rules from the indexer for a given namespace and name.
func (s rulesNamespaceLister) Get(name string) (*v1alpha1.Rules, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rules"), name)
	}
	return obj.(*v1alpha1.Rules), nil
}
