/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-upcloud-api/apis/managed/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseLogicalDatabaseLister helps list DatabaseLogicalDatabases.
// All objects returned here must be treated as read-only.
type DatabaseLogicalDatabaseLister interface {
	// List lists all DatabaseLogicalDatabases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseLogicalDatabase, err error)
	// DatabaseLogicalDatabases returns an object that can list and get DatabaseLogicalDatabases.
	DatabaseLogicalDatabases(namespace string) DatabaseLogicalDatabaseNamespaceLister
	DatabaseLogicalDatabaseListerExpansion
}

// databaseLogicalDatabaseLister implements the DatabaseLogicalDatabaseLister interface.
type databaseLogicalDatabaseLister struct {
	indexer cache.Indexer
}

// NewDatabaseLogicalDatabaseLister returns a new DatabaseLogicalDatabaseLister.
func NewDatabaseLogicalDatabaseLister(indexer cache.Indexer) DatabaseLogicalDatabaseLister {
	return &databaseLogicalDatabaseLister{indexer: indexer}
}

// List lists all DatabaseLogicalDatabases in the indexer.
func (s *databaseLogicalDatabaseLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseLogicalDatabase, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseLogicalDatabase))
	})
	return ret, err
}

// DatabaseLogicalDatabases returns an object that can list and get DatabaseLogicalDatabases.
func (s *databaseLogicalDatabaseLister) DatabaseLogicalDatabases(namespace string) DatabaseLogicalDatabaseNamespaceLister {
	return databaseLogicalDatabaseNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseLogicalDatabaseNamespaceLister helps list and get DatabaseLogicalDatabases.
// All objects returned here must be treated as read-only.
type DatabaseLogicalDatabaseNamespaceLister interface {
	// List lists all DatabaseLogicalDatabases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseLogicalDatabase, err error)
	// Get retrieves the DatabaseLogicalDatabase from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabaseLogicalDatabase, error)
	DatabaseLogicalDatabaseNamespaceListerExpansion
}

// databaseLogicalDatabaseNamespaceLister implements the DatabaseLogicalDatabaseNamespaceLister
// interface.
type databaseLogicalDatabaseNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseLogicalDatabases in the indexer for a given namespace.
func (s databaseLogicalDatabaseNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseLogicalDatabase, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseLogicalDatabase))
	})
	return ret, err
}

// Get retrieves the DatabaseLogicalDatabase from the indexer for a given namespace and name.
func (s databaseLogicalDatabaseNamespaceLister) Get(name string) (*v1alpha1.DatabaseLogicalDatabase, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databaselogicaldatabase"), name)
	}
	return obj.(*v1alpha1.DatabaseLogicalDatabase), nil
}
