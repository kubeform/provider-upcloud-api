/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-upcloud-api/apis/managed/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabasePostgresqlLister helps list DatabasePostgresqls.
// All objects returned here must be treated as read-only.
type DatabasePostgresqlLister interface {
	// List lists all DatabasePostgresqls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabasePostgresql, err error)
	// DatabasePostgresqls returns an object that can list and get DatabasePostgresqls.
	DatabasePostgresqls(namespace string) DatabasePostgresqlNamespaceLister
	DatabasePostgresqlListerExpansion
}

// databasePostgresqlLister implements the DatabasePostgresqlLister interface.
type databasePostgresqlLister struct {
	indexer cache.Indexer
}

// NewDatabasePostgresqlLister returns a new DatabasePostgresqlLister.
func NewDatabasePostgresqlLister(indexer cache.Indexer) DatabasePostgresqlLister {
	return &databasePostgresqlLister{indexer: indexer}
}

// List lists all DatabasePostgresqls in the indexer.
func (s *databasePostgresqlLister) List(selector labels.Selector) (ret []*v1alpha1.DatabasePostgresql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabasePostgresql))
	})
	return ret, err
}

// DatabasePostgresqls returns an object that can list and get DatabasePostgresqls.
func (s *databasePostgresqlLister) DatabasePostgresqls(namespace string) DatabasePostgresqlNamespaceLister {
	return databasePostgresqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabasePostgresqlNamespaceLister helps list and get DatabasePostgresqls.
// All objects returned here must be treated as read-only.
type DatabasePostgresqlNamespaceLister interface {
	// List lists all DatabasePostgresqls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabasePostgresql, err error)
	// Get retrieves the DatabasePostgresql from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabasePostgresql, error)
	DatabasePostgresqlNamespaceListerExpansion
}

// databasePostgresqlNamespaceLister implements the DatabasePostgresqlNamespaceLister
// interface.
type databasePostgresqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabasePostgresqls in the indexer for a given namespace.
func (s databasePostgresqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabasePostgresql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabasePostgresql))
	})
	return ret, err
}

// Get retrieves the DatabasePostgresql from the indexer for a given namespace and name.
func (s databasePostgresqlNamespaceLister) Get(name string) (*v1alpha1.DatabasePostgresql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databasepostgresql"), name)
	}
	return obj.(*v1alpha1.DatabasePostgresql), nil
}
