/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-upcloud-api/apis/managed/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatabaseMysqlLister helps list DatabaseMysqls.
// All objects returned here must be treated as read-only.
type DatabaseMysqlLister interface {
	// List lists all DatabaseMysqls in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseMysql, err error)
	// DatabaseMysqls returns an object that can list and get DatabaseMysqls.
	DatabaseMysqls(namespace string) DatabaseMysqlNamespaceLister
	DatabaseMysqlListerExpansion
}

// databaseMysqlLister implements the DatabaseMysqlLister interface.
type databaseMysqlLister struct {
	indexer cache.Indexer
}

// NewDatabaseMysqlLister returns a new DatabaseMysqlLister.
func NewDatabaseMysqlLister(indexer cache.Indexer) DatabaseMysqlLister {
	return &databaseMysqlLister{indexer: indexer}
}

// List lists all DatabaseMysqls in the indexer.
func (s *databaseMysqlLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseMysql, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseMysql))
	})
	return ret, err
}

// DatabaseMysqls returns an object that can list and get DatabaseMysqls.
func (s *databaseMysqlLister) DatabaseMysqls(namespace string) DatabaseMysqlNamespaceLister {
	return databaseMysqlNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatabaseMysqlNamespaceLister helps list and get DatabaseMysqls.
// All objects returned here must be treated as read-only.
type DatabaseMysqlNamespaceLister interface {
	// List lists all DatabaseMysqls in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DatabaseMysql, err error)
	// Get retrieves the DatabaseMysql from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DatabaseMysql, error)
	DatabaseMysqlNamespaceListerExpansion
}

// databaseMysqlNamespaceLister implements the DatabaseMysqlNamespaceLister
// interface.
type databaseMysqlNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DatabaseMysqls in the indexer for a given namespace.
func (s databaseMysqlNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DatabaseMysql, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DatabaseMysql))
	})
	return ret, err
}

// Get retrieves the DatabaseMysql from the indexer for a given namespace and name.
func (s databaseMysqlNamespaceLister) Get(name string) (*v1alpha1.DatabaseMysql, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("databasemysql"), name)
	}
	return obj.(*v1alpha1.DatabaseMysql), nil
}
